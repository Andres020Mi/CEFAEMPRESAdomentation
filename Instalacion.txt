# Instrucciones de Instalación del Proyecto CEFAEMPRESA

Esta guía detalla los pasos necesarios para instalar y configurar el proyecto **CEFAEMPRESA**, una aplicación desarrollada con **Laravel 12**. Sigue cuidadosamente cada paso para garantizar una configuración exitosa.

---

## Requisitos Previos

El proyecto requiere las siguientes tecnologías. Puedes instalarlas individualmente o usar un gestor de servicios como **XAMPP** o **Docker** para facilitar el proceso:

- **PHP** 8.2 o superior
- **Node.js** (con npm)
- **Composer** (gestor de dependencias de PHP)
- **Git** (para clonar el repositorio)
- **MySQL** (o SQLite para una configuración rápida)
- **Apache** (o el servidor web integrado de Laravel)

Asegúrate de que todas estas herramientas estén instaladas y configuradas correctamente antes de continuar.

---

## Pasos de Instalación

### 1. Clonar el Repositorio

Clona el repositorio del proyecto en la carpeta adecuada para tu entorno. Si usas **XAMPP**, esta carpeta suele ser `C:\xampp\htdocs`. Abre una terminal y ejecuta el siguiente comando:

```bash
git clone https://github.com/Andres020Mi/CEFAEMPRESA.git
```

> **Nota**: Si no estás en la carpeta correcta, usa el comando `cd` para navegar a la ubicación deseada, por ejemplo:
> ```bash
> cd C:\xampp\htdocs
> ```

### 2. Acceder a la Carpeta del Proyecto

Una vez clonado el repositorio, ingresa a la carpeta del proyecto con el siguiente comando:

```bash
cd CEFAEMPRESA
```

Puedes usar el comando `dir` (en Windows) o `ls` (en Linux/Mac) para verificar las carpetas disponibles:

```bash
dir
```

### 3. Instalar Dependencias de PHP

Instala las dependencias de **Composer** necesarias para Laravel ejecutando:

```bash
composer install
```

Este comando descargará e instalará todas las librerías especificadas en el archivo `composer.json`.

### 4. Instalar Dependencias de Node.js

El proyecto utiliza **Vite** para gestionar los activos frontend. Instala las dependencias de Node.js con:

```bash
npm install
```

### 5. Configurar el Archivo de Entorno

Laravel requiere un archivo `.env` para almacenar configuraciones como la conexión a la base de datos. Crea una copia del archivo `.env.example` con el siguiente comando:

```bash
cp .env.example .env
```

> **Nota**: En Windows, si el comando `cp` no funciona, puedes copiar manualmente el archivo `.env.example` y renombrarlo a `.env`.

### 6. Generar la Clave de Aplicación

Genera una clave única para la aplicación Laravel ejecutando:

```bash
php artisan key:generate
```

Esta clave se almacenará en el archivo `.env` y es necesaria para la seguridad de la aplicación.

### 7. Configurar la Base de Datos

El proyecto puede usar **SQLite** para una configuración rápida o **MySQL** (u otra base de datos) según tus necesidades.

#### Opción 1: Usar SQLite

Crea una base de datos SQLite vacía con el siguiente comando:

```bash
type nul > database\database.sqlite
```

Asegúrate de que el archivo `.env` tenga la siguiente configuración:

```env
DB_CONNECTION=sqlite
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=
```

#### Opción 2: Usar MySQL

Si prefieres MySQL, crea una base de datos en tu servidor MySQL y configura el archivo `.env` con los detalles correspondientes, por ejemplo:

```env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=nombre_de_tu_base_de_datos
DB_USERNAME=tu_usuario
DB_PASSWORD=tu_contraseña
```

### 8. Ejecutar las Migraciones

El proyecto utiliza la librería **nwidart/laravel-modules v12**, que organiza las migraciones por módulos. Sigue este orden para migrar las tablas correctamente:

1. **Migrar las tablas base de Laravel**:

```bash
php artisan migrate
```

2. **Migrar el módulo de Usuarios** (contiene las tablas para la gestión de usuarios):

```bash
php artisan module:migrate Users
```

### 9. Desplegar el Proyecto

Para ejecutar el proyecto en modo desarrollo, Laravel 12 permite combinar los comandos `npm run dev` y `php artisan serve` en uno solo. Usa:

```bash
composer run dev
```

Esto iniciará el servidor de desarrollo y compilará los activos frontend. El proyecto estará disponible en `http://localhost:8000` (o el puerto especificado).

---

## Notas Adicionales

- Asegúrate de que el servidor Apache o el servidor integrado de Laravel esté activo.
- Si encuentras errores, verifica que las versiones de PHP, Node.js y Composer sean compatibles con Laravel 12.
- Revisa el archivo `.env` para ajustes adicionales según tu entorno (por ejemplo, configuración de correo o almacenamiento).

---

¡Listo! Ahora el proyecto **CEFAEMPRESA** debería estar configurado y funcionando correctamente.
